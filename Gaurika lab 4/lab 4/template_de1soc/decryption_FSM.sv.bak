

module decryption_FSM(
input logic [23:0] secret_key,
output logic wen,
input logic q,
output logic data,
output logic address,
output logic address_d,
output logic data_d,
output logic wren_d,
output logic address_m,
input logic q_m);

// initialize s array.  You will build this in Task 1    
for i = 0 to 255 {
				s[i] = i;
}    // shuffle the array based on the secret key.  You will build this in Task 2 
  j = 0    
  for i = 0 to 255 {
	j = (j + s[i] + secret_key[i mod keylength] )  //keylength is 3 in our impl.     
	swap values of s[i] and s[j]    
	}    // compute one byte per character in the encrypted message.  You will build this in Task 2    
  i = 0, j=0    
  for k = 0 to message_length-1 {   // message_length is 32 in our implementation     
  i = i+1     
  j = j+s[i]     
  swap values of s[i] and s[j]    
  f = s[ (s[i]+s[j]) ]     
  decrypted_output[k] = f xor encrypted_input[k]   // 8 bit wide XOR function    
 }


endmodule
